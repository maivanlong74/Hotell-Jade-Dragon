@model Jade_Dragon.Models.khachsan

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Admin/Views/Shared/LayoutAdmin.cshtml";
}



<link href="~/Style/css/layout/BanDo.css" rel="stylesheet" />

<style>
    #map .Search-Search {
        position: absolute;
        z-index: 999;
        margin-left: 110px;
        margin-top: 30px;
    }

    #map .Search-Search #search-input {
        width: 230px;
        height: 40px;
        border-radius: 20px;
        text-align: center;
    }

    #map .Search-Search button {
        height: 40px;
        width: 100px;
        border-radius: 20px;
        cursor: pointer;
    }

    #map .Search-Search button:hover {
        background: #95a5a6;
        color: wheat;
        font-weight: 700;
    }
    .home .body .Content form #result{
        color: wheat;
    }
    .home .body .Content form .one {
        padding-bottom: 20px;
    }
</style>
<body onload="initMap()">
    <div class="home">
        <div class="body">

            <div class="Content">
                @using (Html.BeginForm("Create",
                            "QLKhachSan",
                            FormMethod.Post,
                            new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="Info">
                        <div class="one">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        </div>
                        <div class="tenkh one">
                            <label for="">Avt: </label>
                            <input type="file" id="uploadhinh" name="uploadhinh" accept="image/*"
                                   style=" color: aliceblue;" />
                        </div>
                        <div style="display:flex">
                            <div class="one">
                                <div class="label">
                                    <label for="">Tên Khách sạn: </label>
                                </div>
                                @Html.EditorFor(model => model.TenKhachSan, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.TenKhachSan, "", new { @class = "text-danger" })
                            </div>
                            <div class="one">
                                <div class="label">
                                    <label for="">Số điện thoại: </label>
                                </div>
                                @Html.EditorFor(model => model.SoDienThoai, new { htmlAttributes = new { @class = "form-control", type = "tel" } })
                                @Html.ValidationMessageFor(model => model.SoDienThoai, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div style="display:flex;">
                            <div class="one">
                                <div class="label">
                                    <label for="">Gmail: </label>
                                </div>
                                @Html.EditorFor(model => model.Gmail, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Gmail, "", new { @class = "text-danger" })
                            </div>
                            <div class="one">
                                <div class="label">
                                    <label for="">Địa chỉ: </label>
                                </div>
                                @Html.EditorFor(model => model.DiaChi, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DiaChi, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div style="display:flex;">
                            <div class="one">
                                <div class="label">
                                    <label for="">Giá: </label>
                                </div>
                                @Html.EditorFor(model => model.Gia, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Gia, "", new { @class = "text-danger" })
                            </div>
                            <div class="one">
                                <div class="label">
                                    <label for="">Khu vực: </label>
                                </div>
                                @Html.DropDownListFor(model => model.MaKhuVuc, null, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MaKhuVuc, "", new { @class = "text-danger" })
                            </div> <br />
                        </div>
                        <div class="one" id="result"></div>
                        <div class="one">
                            <input type="submit" class="save two" value="Create">
                        </div>
                    </div>
                }
                <div class="button">
                    <a href="@Url.Action("QuanLyKs", "QLKhachSan")" class="out two">Quay về trang khách sạn</a>
                </div>

            </div>
            <div id="map" class="map">
                <div class="Search-Search">
                    <input type="text" id="search-input" placeholder="Tìm kiếm địa điểm">
                    <button id="search-button">Tìm kiếm</button>
                </div>
            </div>
        </div>
    </div>

    <script>
var map;
function initMap() {
    // Thiết lập bản đồ
    map = new ol.Map({
        target: 'map',
        layers: [
            new ol.layer.Tile({
                source: new ol.source.OSM(),
            }),
        ],
    });
    // ------------------------------
    if ('geolocation' in navigator) {
        navigator.geolocation.getCurrentPosition(function (position) {
            var pos = ol.proj.fromLonLat([position.coords.longitude, position.coords.latitude]);
            var data = {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude
            };
            $.ajax({
                type: 'POST',
                url: '/Admin/QLKhachSan/Create',
                data: JSON.stringify(data),
                contentType: 'application/json',
                success: function () {
                    console.log('Đã gửi vị trí đến máy chủ');
                }
            });
            var marker = new ol.Feature({
                geometry: new ol.geom.Point(pos)
            });
            var markerSource = new ol.source.Vector({
                features: [marker]
            });
            var markerLayer = new ol.layer.Vector({
                source: markerSource
            });
            map.addLayer(markerLayer);
            map.getView().setCenter(pos);
            map.getView().setZoom(15);
        });
    } else {
        alert('Định vị địa lý không được trình duyệt của bạn hỗ trợ');
    }

    // Thêm control để xác định vị trí hiện tại
    var geolocation = new ol.Geolocation({
        trackingOptions: {
            enableHighAccuracy: true
        },
        projection: map.getView().getProjection()
    });
    var positionFeature = new ol.Feature();
    positionFeature.setStyle(new ol.style.Style({
        image: new ol.style.Circle({
            radius: 6,
            fill: new ol.style.Fill({
                color: '#3399CC'
            }),
            stroke: new ol.style.Stroke({
                color: '#fff',
                width: 2
            })
        })
    }));
    // Tạo một đối tượng marker
    var marker = new ol.Feature({
        geometry: new ol.geom.Point(ol.proj.fromLonLat([0, 0]))
    });
    marker.setStyle(new ol.style.Style({
        image: new ol.style.Icon({
            anchor: [0.5, 1],
            src: 'https://openlayers.org/en/latest/examples/data/icon.png'
        })
    }));

    // Thêm marker vào bản đồ
    var markerLayer = new ol.layer.Vector({
        source: new ol.source.Vector({
            features: [marker]
        })
    });
    map.addLayer(markerLayer);

    // Xử lý thông tin địa điểm khi click vào bản đồ
    map.on('singleclick', function (evt) {
        var clickedCoordinate = evt.coordinate;
        var lonlat = ol.proj.toLonLat(clickedCoordinate);
        // Di chuyển marker tới vị trí click
        marker.getGeometry().setCoordinates(clickedCoordinate);
        handlePosition(lonlat, evt, clickedCoordinate);
    });

    function handlePosition(lonlat, evt, clickedCoordinate) {
        // Tìm kiếm địa điểm gần vị trí chọn nhất và hiển thị thông tin lên bản đồ
        var url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lonlat[1]}&lon=${lonlat[0]}&addressdetails=1&zoom=18`;
        fetch(url)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                var result = document.getElementById("result");
                if (result) {
                    var address = data.address;
                    var houseNumber = address.house_number || '';
                    var road = address.road || '';
                    var suburb = address.suburb || address.neighbourhood || '';
                    var city = address.city || address.town || address.village || '';
                    var state = address.state || '';
                    var country = address.country || '';
                    var postcode = address.postcode || '';
                    var displayName = `${houseNumber} ${road}, ${suburb}, ${city}, ${state}, ${country} ${postcode}`;

                    var latitude = lonlat[1];
                    var longitude = lonlat[0];
                    result.innerHTML = `
                        <div>
                            <b>${displayName}</b>
                            <br>
                            <i>Kinh độ:</i> ${longitude} 
                            <br>
                            <i>Vĩ độ:</i> ${latitude}
                            <br>
                            <i>Tên đất nước:</i> ${country}
                            <br>
                            <i>Mã bưu chính:</i> ${postcode}
                            <br>
                            <i>Địa chỉ đầy đủ:</i> ${data.display_name}
                        </div>
                        <input type="hidden" placeholder="" value="${displayName}" name="">
                        <input type="hidden" value="Kinh độ: ${longitude} Vĩ độ: ${latitude}" readonly>`;
                } else {
                    console.log("Không tìm thấy phần tử có ID 'kết quả'");
                }
            })
            .catch(error => {
                console.error("Lỗi khi tìm nạp dữ liệu:", error);
            });
    }

    // Thêm control zoom slider
    var zoomSlider = new ol.control.ZoomSlider();
    map.addControl(zoomSlider);
    // Thêm control full screen
    var fullScreen = new ol.control.FullScreen();
    map.addControl(fullScreen);

    /*--------*/
    // Lấy các phần tử input và button tìm kiếm
    var searchInput = document.getElementById('search-input');
    var searchButton = document.getElementById('search-button');

    // Xử lý sự kiện click vào nút tìm kiếm
    searchButton.addEventListener('click', function () {
        var searchText = searchInput.value;
        if (searchText !== '') {
            // Kiểm tra xem người dùng đã nhập vào một từ khóa hay là một tọa độ
            if (isNaN(searchText)) {
                // Tìm kiếm địa điểm dựa trên từ khóa
                searchPlaceByName(searchText);
            } else {
                // Chuyển đổi tọa độ kinh độ/vĩ độ thành đối tượng OpenLayers và di chuyển marker tới vị trí đó
                var coordinates = [parseFloat(searchText.split(',')[0]), parseFloat(searchText.split(',')[1])];
                var pos = ol.proj.fromLonLat(coordinates);
                marker.getGeometry().setCoordinates(pos);
                // Set lại center của map
                map.getView().setCenter(pos);
                map.getView().setZoom(15);
            }
        }
    });

    // Xử lý sự kiện nhấn phím Enter để gửi tin nhắn
    $('#search-input').keypress(function (e) {
        if (e.which === 13) { // Kiểm tra xem phím Enter đã được bấm chưa
            var searchText = searchInput.value;
            if (searchText !== '') {
                // Kiểm tra xem người dùng đã nhập vào một từ khóa hay là một tọa độ
                if (isNaN(searchText)) {
                    // Tìm kiếm địa điểm dựa trên từ khóa
                    searchPlaceByName(searchText);
                } else {
                    // Chuyển đổi tọa độ kinh độ/vĩ độ thành đối tượng OpenLayers và di chuyển marker tới vị trí đó
                    var coordinates = [parseFloat(searchText.split(',')[0]), parseFloat(searchText.split(',')[1])];
                    var pos = ol.proj.fromLonLat(coordinates);
                    marker.getGeometry().setCoordinates(pos);
                    // Set lại center của map
                    map.getView().setCenter(pos);
                    map.getView().setZoom(15);
                }
            }
        }
    });

    // Hàm tìm kiếm địa điểm dựa trên từ khóa
    function searchPlaceByName(searchText) {
        var url = `https://nominatim.openstreetmap.org/search?q=${searchText}&format=json`;
        fetch(url)
            .then(response => response.json())
            .then(data => {
                if (data.length > 0) {
                    var result = data[0];
                    var pos = ol.proj.fromLonLat([parseFloat(result.lon), parseFloat(result.lat)]);
                    // Di chuyển marker tới vị trí tìm kiếm được
                    marker.getGeometry().setCoordinates(pos);
                    // Set lại center của map
                    map.getView().setCenter(pos);
                    map.getView().setZoom(15);
                } else {
                    alert('Không tìm thấy địa điểm');
                }
            })

    }
}
    </script>

</body>

